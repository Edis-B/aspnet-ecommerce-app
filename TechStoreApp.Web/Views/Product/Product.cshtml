@using TechStoreApp.Common
@using TechStoreApp.Web.ViewModels.Products
@model ProductViewModel

<script src="~/js/product-page.js"></script>
<link rel="stylesheet" href="~/css/product-page.css" />
<title>@Model.Name</title>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}

<div class="product-details-container">
    <div class="div-image-container">
        <img class="image-for-product" src="@Model.ImageUrl" onerror="invalidProductPhoto(this)" data-stock="@Model.Stock" />
    </div>

    <div class="product-info">
        <h3 class="product-name-p">@Model.Name</h3>
        <p class="product-description-p">@Model.Description</p>
        <p class="product-price-p">Price: $@Model.Price</p>
        <p class="product-stock-p">Stock: @Model.Stock</p>

        <form class="add-to-cart" asp-controller="Cart" asp-action="AddToCart" method="post">
            <input type="hidden" name="productId" value="@Model.ProductId" />
            <button class="add-to-cart-button" type="submit">
                Add to Cart
                <img class="cart-image" src="~/images/cart-icon-28356.png" />
            </button>
        </form>

        @if (User.IsInRole(GeneralConstraints.AdminRoleName))
        {
            <a class="edit-button" asp-controller="Product" asp-action="Edit" asp-area="Admin" asp-route-productId="@Model.ProductId">
                Edit
                <img src="~/images/clipboard.png" />
            </a>
        }

        @{
            await Html.RenderPartialAsync("_LikesProductPartial", new { productId = Model.ProductId, checkedString = Model.CheckedString, totalLikes = Model.TotalLikes });
        }
    </div>
</div>

<div class="review-section">
    <form id="post-review-form" method="post" asp-controller="Review" asp-action="CreateReview">
        <input type="hidden" name="productId" value="@Model.ProductId" id="product-id-input">

        <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

        <label asp-for="Review.Comment">Comment</label>
        <input type="text" name="comment" asp-for="Review.Comment" id="review-comment-input">       
        <span asp-validation-for="Review.Comment" id="validate-Comment" class="text-danger"></span>


        @* Rating *@
        <label asp-for="Review.Rating">Rating</label>
        <div class="user-rating-div">
            @for (int i = 1; i <= 5; i++)
            {
                <label class="single-star" id="@i">
                    <input type="radio" name="Rating" value="@i" class="rating-input" />
                    <span class="star-symbol">&#9734;</span>
                </label>
            }
        </div>
        <span asp-validation-for="Review.Rating" id="validate-Rating" class="text-danger"></span>

        <button id="post-review-button" type="submit">Post Review</button>
    </form>
</div>

<h3>Reviews</h3>
<div class="reviews-div-container">
    @{
        foreach (var review in Model.Reviews)
        {
            <hr />

            <div class="review-container d-flex flex-column align-items-start mb-4">
                <img class="ratio ratio-1x1 rounded-circle img-fluid" src="@review.Author.PictureUrl" onerror="invalidProfilePicture(this)" />
                <p class="author-review">@review.Author.Name</p>

                <p class="review-comment">@review.Comment</p>
                <p class="single-star-p">
                    @{
                        // Get string for rating
                        var filledStars = new string('★', review.Rating);    // Filled stars
                        var emptyStars = new string('☆', 5 - review.Rating); // Empty stars
                    }
                    @Html.Raw(filledStars)@Html.Raw(emptyStars)
                </p>
            </div>
        }
    }
</div>
